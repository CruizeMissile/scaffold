
# dependencies
include("${CMAKE_CURRENT_LIST_DIR}/sf_include.cmake")
sf_include_sf_dependency_once(sf_log)
sf_include_sf_dependency_once(sf_detection)
sf_include_sf_dependency_once(sf_flags)

macro(sf_check_if_compiler_supports_version version)
    if("${version}" STREQUAL "17")
        if(${SF_COMPILER_IS_MSVC})
            set(is_supported true)
        else()
            sf_check_compiler_flag("-std=c++1z" is_supported)
        endif()
    elseif("${version}" STREQUAL "14")
        if(${SF_COMPILER_IS_MSVC})
            set(is_supported true)
        else()
            sf_check_compiler_flag("-std=c++14" is_supported)
        endif()
    elseif("${version}" STREQUAL "11")
        if(${SF_COMPILER_IS_MSVC})
            set(is_supported true)
        else()
            sf_check_compiler_flag("-std=c++11" is_supported)
        endif()
    endif()

    if(NOT is_supported)
        sf_fatal_error_message("Compiler does not support version of c++ ${version}")
    endif()
endmacro()

macro(sf_set_cxxstd x)
    sf_message("settings required c++ standard to ${x}")

    sf_check_if_compiler_supports_version("${x}")
    # depending on the version of cmake CXX_STANDARD might not have 17
    if ("${x}" EQUAL "17")
        # before cmake version 3.8.2 c++ 17 does not exist
        if (${CMAKE_VERSION} VERSION_GREATER 3.8.2)
            set(CMAKE_CXX_EXTENTIONS off)
            set(CMAKE_CXX_STANDARD_REQUIRED on)
            set(CMAKE_CXX_STANDARD ${x}})
        endif()
        if (SF_COMPILER_IS_MSVC)
            sf_add_compiler_flag("/std:c++latest")
        else()
            sf_add_compiler_flag("-std=c++1z")
        endif()
    else()
        # this is 14 or below and should be included by older versions of cmake
        set(CMAKE_CXX_EXTENTIONS off)
        set(CMAKE_CXX_STANDARD_REQUIRED on)
        set(CMAKE_CXX_STANDARD ${x}})
    endif()
endmacro()
